// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SuperAdmin {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String // We will store a hashed password
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model School {
  id                 String             @id @default(cuid())
  name               String // e.g., "Hogwarts School of Witchcraft"
  subdomain          String             @unique // e.g., "hogwarts"
  logo               String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  subscriptionStatus SubscriptionStatus @default(TRIAL)

  // Later we will add relations to users, students, etc.
  modules           Module[]
  users             User[]
  students          Student[]
  classes           Class[]
  subjects          Subject[]
  timeSlots         TimeSlot[]
  timetableEntries  TimetableEntry[]
  attendanceRecords AttendanceRecord[]
  exams             Grade[]
  planId            String?
  plan              SubscriptionPlan?  @relation(fields: [planId], references: [id])
  Exam              Exam[]
  gradingSystem     Json?
}

model User {
  id        String   @id @default(cuid())
  email     String
  name      String?
  password  String
  role      UserRole @default(ADMIN) // Role within the school
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  classInCharge Class[] @relation("ClassTeacher")

  // Relation to School: Every user must belong to one school
  schoolId           String
  school             School                   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  subjectAssignments ClassSubjectAssignment[]
  teachableSubjects  Subject[]                @relation("TeacherSubjects")
  maxPeriodsPerWeek  Int?
  timetableEntries   TimetableEntry[]
  attendanceRecords  AttendanceRecord[]

  // Ensure email is unique per school
  @@unique([email, schoolId])
}

// Define an Enum for the user roles
enum UserRole {
  ADMIN // The main school administrator
  TEACHER
  HR // Human Resources
  ACCOUNTANT
  LIBRARIAN
  PROCUREMENT_OFFICER // For managing stores/inventory
}

enum SubscriptionStatus {
  TRIAL // On a trial period
  ACTIVE // Actively subscribed and paid
  INACTIVE // Subscription ended or was canceled
  DEACTIVATED // Manually deactivated by Super Admin
}

model Setting {
  id    String @id @default(cuid())
  key   String @unique // e.g., "maintenanceMode", "allowNewSignups"
  value String // e.g., "true", "false"
}

model SubscriptionPlan {
  id        String     @id @default(cuid())
  name      String     @unique // e.g., "Basic", "Pro", "Enterprise"
  price     Decimal    @db.Decimal(10, 2) // For storing monetary values accurately
  features  String[] // A list of features included in the plan
  status    PlanStatus @default(ACTIVE)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // A plan can be assigned to many schools
  schools School[]
}

// --- NEW ENUM ---
enum PlanStatus {
  ACTIVE
  ARCHIVED
}

model Module {
  id          String  @id @default(cuid())
  name        String  @unique // e.g., "Library Management"
  description String?
  key         String  @unique // e.g., "LIBRARY", "STORES"

  // A module can be enabled for many schools
  schools School[]
}

model Student {
  id        String   @id @default(cuid())
  name      String
  studentId String // A unique ID assigned by the school
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation to School: Every student must belong to one school
  dateOfBirth  DateTime? @db.Date
  // A JSON field is great for storing structured but flexible data
  // like guardian contact info without needing a separate model.
  guardianInfo Json?

  classId           String?
  class             Class?             @relation(fields: [classId], references: [id], onDelete: SetNull)
  schoolId          String
  school            School             @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  attendanceRecords AttendanceRecord[]
  grades            Grade[]

  @@unique([studentId, schoolId])
}

model Class {
  id        String   @id @default(cuid())
  name      String // e.g., "Grade 10 - Section A"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation to School
  schoolId           String
  school             School                   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  subjectAssignments ClassSubjectAssignment[]

  // Relation to the main class teacher
  classTeacherId String?
  classTeacher   User?   @relation("ClassTeacher", fields: [classTeacherId], references: [id], onDelete: SetNull)

  // A class has many students
  students            Student[]
  subjectRequirements ClassSubjectRequirement[]
  timetableEntries    TimetableEntry[]

  @@unique([name, schoolId])
}

model Subject {
  id        String   @id @default(cuid())
  name      String // e.g., "Mathematics", "Physics"
  code      String? // e.g., "MATH-101"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation to School
  schoolId String
  school   School @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  // A subject can be in many class assignments
  classAssignments  ClassSubjectAssignment[]
  qualifiedTeachers User[]                   @relation("TeacherSubjects")

  // A subject has many weekly requirements in different classes
  classRequirements ClassSubjectRequirement[]
  timetableEntries  TimetableEntry[]
  grades            Grade[]

  @@unique([name, schoolId])
}

// --- NEW JOIN MODEL ---
// This model connects a Class, a Subject, and a Teacher
model ClassSubjectAssignment {
  id String @id @default(cuid())

  classId String
  class   Class  @relation(fields: [classId], references: [id], onDelete: Cascade)

  subjectId String
  subject   Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  teacherId String
  teacher   User   @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([classId, subjectId]) // A subject can only be assigned once per class
}

model TimeSlot {
  id               String           @id @default(cuid())
  dayOfWeek        DayOfWeek // e.g., MONDAY, TUESDAY
  periodNumber     Int
  startTime        String // e.g., "08:00"
  endTime          String // e.g., "08:40"
  isBreak          Boolean          @default(false) // To mark lunch breaks, etc.
  timetableEntries TimetableEntry[]

  // Relation to School
  schoolId String
  school   School @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  @@unique([schoolId, dayOfWeek, periodNumber])
}

// Defines how many periods of a subject a class needs per week
model ClassSubjectRequirement {
  id             String @id @default(cuid())
  periodsPerWeek Int

  classId String
  class   Class  @relation(fields: [classId], references: [id], onDelete: Cascade)

  subjectId String
  subject   Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@unique([classId, subjectId])
}

// --- NEW ENUM ---

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model TimetableEntry {
  id String @id @default(cuid())

  classId String
  class   Class  @relation(fields: [classId], references: [id])

  subjectId String
  subject   Subject @relation(fields: [subjectId], references: [id])

  teacherId String
  teacher   User   @relation(fields: [teacherId], references: [id])

  timeSlotId String
  timeSlot   TimeSlot @relation(fields: [timeSlotId], references: [id])

  schoolId String
  school   School @relation(fields: [schoolId], references: [id])

  @@unique([timeSlotId, classId]) // A class can only have one subject per slot
  @@unique([timeSlotId, teacherId]) // A teacher can only have one class per slot
}

model AttendanceRecord {
  id        String           @id @default(cuid())
  date      DateTime         @db.Date // Store only the date, not the time
  status    AttendanceStatus // e.g., PRESENT, ABSENT, LATE
  remarks   String? // Optional notes from the teacher
  createdAt DateTime         @default(now())

  // Relation to School
  schoolId String
  school   School @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  // Relation to the student
  studentId String
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  // Relation to the teacher who took attendance
  takenById String
  takenBy   User   @relation(fields: [takenById], references: [id], onDelete: Cascade)

  // Ensure a student has only one record per day
  @@unique([studentId, date])
}

// --- NEW ENUM ---
enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
}

model Exam {
  id        String   @id @default(cuid())
  name      String // e.g., "Mid-Term Exams 2025"
  date      DateTime @db.Date
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation to School
  schoolId String
  school   School @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  // An exam has many grades associated with it
  grades Grade[]

  @@unique([name, schoolId])
}

// --- NEW MODEL ---
model Grade {
  id String @id @default(cuid())

  // Marks for different components
  examMarks       Int?
  assignmentMarks Int?
  classworkMarks  Int?

  // Maximum possible marks for each component
  maxExamMarks       Int?
  maxAssignmentMarks Int?
  maxClassworkMarks  Int?

  remarks   String?
  createdAt DateTime @default(now())

  // --- Relations ---
  examId String
  exam   Exam   @relation(fields: [examId], references: [id], onDelete: Cascade)

  studentId String
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  subjectId String
  subject   Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  School    School? @relation(fields: [schoolId], references: [id])
  schoolId  String?

  // A grade must be unique for a student in a specific subject for a specific exam
  @@unique([studentId, subjectId, examId])
}
